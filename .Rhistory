dpx <- annot2dpv(annot_file,
file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
verbose = verbose)
devtools::load_all(".")
devtools::load_all(".")
cortex_2_3datlas()
dirs <- sapply(c(paste("atlas", annot, c("ascii", "ply"), sep="/"), "srf/ascii", "srf/ply"),
function(x) file.path(output_dir, subject, x))
j <- lapply(dirs[!sapply(dirs, dir.exists)], dir.create, recursive = TRUE)
hemisphere <- match.arg(hemisphere, c("rh", "lh"))
hemi <- switch(hemisphere, "rh" = "right", "lh" = "left")
annot_file <- list.files(label_dir, paste(hemisphere, annot, "annot", sep="."), full.names = T)
# convert annotation to dpv files
dpx <- annot2dpv(annot_file,
file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
verbose = verbose)
devtools::load_all(".")
devtools::load_all(".")
cortex_2_3datlas()
dirs <- sapply(c(paste("atlas", annot, c("ascii", "ply"), sep="/"), "srf/ascii", "srf/ply"),
function(x) file.path(output_dir, subject, x))
j <- lapply(dirs[!sapply(dirs, dir.exists)], dir.create, recursive = TRUE)
hemisphere <- match.arg(hemisphere, c("rh", "lh"))
hemi <- switch(hemisphere, "rh" = "right", "lh" = "left")
annot_file <- list.files(label_dir, paste(hemisphere, annot, "annot", sep="."), full.names = T)
# convert annotation to dpv files
dpx <- annot2dpv(annot_file,
file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
verbose = verbose)
devtools::load_all(".")
cortex_2_3datlas()
dirs <- sapply(c(paste("atlas", annot, c("ascii", "ply"), sep="/"), "srf/ascii", "srf/ply"),
function(x) file.path(output_dir, subject, x))
j <- lapply(dirs[!sapply(dirs, dir.exists)], dir.create, recursive = TRUE)
hemisphere <- match.arg(hemisphere, c("rh", "lh"))
hemi <- switch(hemisphere, "rh" = "right", "lh" = "left")
annot_file <- list.files(label_dir, paste(hemisphere, annot, "annot", sep="."), full.names = T)
# convert annotation to dpv files
dpx <- annot2dpv(annot_file,
file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
verbose = verbose)
surf <- surf2asc(file.path(subject_dir, subject, "surf", paste(hemisphere, surface, sep=".")),
file.path(dirs[3], paste(hemisphere, surface, "dpv", sep=".")),
verbose = verbose)
# grab entire brain ply
ply <- asc2ply(file.path(dirs[3], paste(hemisphere, surface, "dpv", sep=".")),
file.path(dirs[4], paste(hemisphere, surface, "ply", sep=".")))
ply <- geomorph::read.ply(file.path(dirs[4], paste(hemisphere, surface, "ply", sep=".")),
ShowSpecimen = FALSE)
# split into labels
plys <- surfsplit(
srf_ply = file.path(dirs[4], paste(hemisphere, surface, "ply", sep=".")),
label_path = file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
prefix = annot,
output_dir = file.path(output_dir, subject, "atlas", annot),
verbose = verbose)
devtools::load_all(".")
cortex_2_3datlas()
facewise <- is_facewise(dpx, surf, verbose)
# Make sure data contains only integers (labels)
if(!is.integer(dpx$V1)){
cat('The DPV or DPF file must contain only integers\nAborting.\n')
stop(call. = FALSE)
}
# Make a short list of labels, with no repetitions, and index using
# integers only, monotonically growing and with no intervals
udpx <- unique(dpx$V5)   # Unique labels
udpx <- udpx[order(udpx)]
uidx <- 1:length(udpx)          # Unique corresponding indices
if(verbose) cat('The number of unique labels is',length(udpx), '\n')
cat('The number of unique labels is',length(udpx), '\n')
dpx
(dpx$V5)
unique(dpx$V5)
surf
file.path(dirs[1], paste(hemisphere, annot, "dpv", sep="."))
devtools::load_all(".")
cortex_2_3datlas()
annot <- read_annotation(infile, verbose = verbose)
annot
annot$colortable$code
annot$label
unique(annot$label)
length(annot$label)
is.na(annot$label)
is.na(annot$label) %>% any
annot$label
annot$label %in% annot$colortable$code
!(annot$label %in% annot$colortable$code)
any(!(annot$label %in% annot$colortable$code))
annot$label == 0
any(annot$label == 0)
annot$colortable
sapply(annot$colortable$code, function(x) any(x %in% annot$label))
j <- sapply(annot$colortable$code, function(x) any(x %in% annot$label))
# For each structure, replace its coded colour by its index
labs <- match(annot$label, annot$colortable$code)
labs
unique(labs)
unique(annot$label)
sapply(unique(annot$label), function(x) any(x %in% annot$colortable$code)
)
# Find any color label _not_ in label vector
j <- sapply(annot$colortable$code, function(x) any(x %in% annot$label))
j
annot$colortable[j,]
annot$colortable[!j,]
# Read in annotation file, verbose false since annot2dpv() also spits out this information
ant <- read_annotation(annot_file, verbose = FALSE)$colortable
colortable <- ant$colortable
# find path to annotation file
annot_file <- list.files(label_dir, paste(hemisphere, annot, "annot", sep="."), full.names = T)
# Setup some directories for output data
dirs <- sapply(c(paste("atlas", annot, c("ascii", "ply"), sep="/"), "srf/ascii", "srf/ply"),
function(x) file.path(output_dir, subject, x))
devtools::load_all(".")
cortex_2_3datlas()
# Read in annotation file, verbose false since annot2dpv() also spits out this information
ant <- read_annotation(annot_file, verbose = FALSE)$colortable
colortable <- ant$colortable
colortable
# Read in annotation file, verbose false since annot2dpv() also spits out this information
ant <- read_annotation(annot_file, verbose = verbose)$colortable
colortable <- ant$colortable
# Find any color label _not_ in label vector
j <- sapply(colortable$code, function(x) any(x %in% annot$label))
# find path to annotation file
annot_file <- list.files(label_dir, paste(hemisphere, annot, "annot", sep="."), full.names = T)
# Read in annotation file, verbose false since annot2dpv() also spits out this information
ant <- read_annotation(annot_file, verbose = FALSE)$colortable
colortable <- ant$colortable
# Find any color label _not_ in label vector
j <- sapply(colortable$code, function(x) any(x %in% annot$label))
# convert annotation to dpv files
dpx <- annot2dpv(annot_file,
file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
verbose = verbose)
dpx
# Find any color label _not_ in label vector
lab_not_present <- sapply(colortable$code, function(x) any(x %in% annot$label))
# split into labels
plys <- surfsplit(
srf_ply = file.path(dirs[4], paste(hemisphere, surface, "ply", sep=".")),
label_path = file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
prefix = annot,
output_dir = file.path(output_dir, subject, "atlas", annot),
verbose = verbose)
length(plys) != nrow(colortable)
length(plys)
nrow(colortable)
# Read in annotation file, verbose false since annot2dpv() also spits out this information
ant <- read_annotation(annot_file, verbose = FALSE)$colortable
colortable <- ant$colortable
# Read in annotation file, verbose false since annot2dpv() also spits out this information
ant <- read_annotation(annot_file, verbose = FALSE)
colortable <- ant$colortable
# Find any color label _not_ in label vector
lab_not_present <- sapply(colortable$code, function(x) any(x %in% ant$label))
lab_not_present
match(coloetable$code, ant$label)
match(colortable$code, ant$label)
# Find any color label _not_ in label vector
lab_not_present <- which(is.na(match(colortable$code, ant$label)))
lab_not_present
length(plys) != nrow(colortable)
names(plys)
# Find any color label _not_ in label vector
lab_not_present <- is.na(match(colortable$code, ant$label))
colortable <- colortable[!lab_not_present, ]
colortable
dt <- dplyr::tibble(
atlas = annot,
surf = surface,
hemi = hemi,
region = colortable$label,
colour = colortable$hex,
label = paste(hemisphere, colortable$label, sep="_"),
roi = sprintf("%04d", 1:nrow(colortable)),
annot = colortable$label
)
meshes <- lapply(dt$roi, function(x) plys[[which(names(plys) == x)]])
devtools::load_all(".")
devtools::load_all(".")
dt <- cortex_2_3datlas()
p <- plotly::plot_ly()
for(i in 1:nrow(dt)){
p <- plotly::add_trace(
p,
x = dt$mesh[[i]]$vertices$x,
y = dt$mesh[[i]]$vertices$y,
z = dt$mesh[[i]]$vertices$z,
i = dt$mesh[[i]]$faces$i-1,
j = dt$mesh[[i]]$faces$j-1,
k = dt$mesh[[i]]$faces$k-1,
facecolor = rep(dt$colour[i],nrow(dt$mesh[[i]]$faces)),
type = "mesh3d")
}
p
dt
devtools::load_all(".")
dt <- cortex_2_3datlas()
devtools::load_all(".")
p <- plotly::plot_ly()
for(i in 1:nrow(dt)){
p <- plotly::add_trace(
p,
x = dt$mesh[[i]]$vertices$x,
y = dt$mesh[[i]]$vertices$y,
z = dt$mesh[[i]]$vertices$z,
i = dt$mesh[[i]]$faces$i-1,
j = dt$mesh[[i]]$faces$j-1,
k = dt$mesh[[i]]$faces$k-1,
facecolor = rep(dt$colour[i],nrow(dt$mesh[[i]]$faces)),
type = "mesh3d")
}
p
#                        hemisphere = "rh",
#                        surface = "inflated",
#                        annot = "aparc.a2009s",
#                        subject_dir = freesurfer::fs_subj_dir(),
#                        label_dir = file.path(subject_dir, subject, "label"),
#                        output_dir = "~/Desktop/test2/",
#                        verbose = TRUE)
#
#
#
p <- plotly::plot_ly()
for(i in 1:nrow(dt)){
p <- plotly::add_trace(
p,
x = dt$mesh[[i]]$vertices$x,
y = dt$mesh[[i]]$vertices$y,
z = dt$mesh[[i]]$vertices$z,
i = dt$mesh[[i]]$faces$i-1,
j = dt$mesh[[i]]$faces$j-1,
k = dt$mesh[[i]]$faces$k-1,
facecolor = rep(dt$colour[i],nrow(dt$mesh[[i]]$faces)),
text = dt$label,
type = "mesh3d")
}
p
#                        hemisphere = "rh",
#                        surface = "inflated",
#                        annot = "aparc.a2009s",
#                        subject_dir = freesurfer::fs_subj_dir(),
#                        label_dir = file.path(subject_dir, subject, "label"),
#                        output_dir = "~/Desktop/test2/",
#                        verbose = TRUE)
#
#
#
p <- plotly::plot_ly()
for(i in 1:nrow(dt)){
p <- plotly::add_trace(
p,
x = dt$mesh[[i]]$vertices$x,
y = dt$mesh[[i]]$vertices$y,
z = dt$mesh[[i]]$vertices$z,
i = dt$mesh[[i]]$faces$i-1,
j = dt$mesh[[i]]$faces$j-1,
k = dt$mesh[[i]]$faces$k-1,
facecolor = rep(dt$colour[i],nrow(dt$mesh[[i]]$faces)),
text = dt$label[i],
type = "mesh3d")
}
p
#
#
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
subject_dir = freesurfer::fs_subj_dir(),
label_dir = file.path(subject_dir, subject, "label"),
output_dir = "~/Desktop/test2/",
verbose = TRUE)
devtools::load_all(".")
devtools::load_all(".")
#
#
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
subject_dir = freesurfer::fs_subj_dir(),
label_dir = file.path(subject_dir, subject, "label"),
output_dir = "~/Desktop/test2/",
verbose = TRUE)
devtools::load_all(".")
#
#
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
subject_dir = freesurfer::fs_subj_dir(),
label_dir = file.path(subject_dir, subject, "label"),
output_dir = "~/Desktop/test2/",
verbose = TRUE)
#
#
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
output_dir = "~/Desktop/test2/",
verbose = TRUE)
p <- plotly::plot_ly()
for(i in 1:nrow(dt)){
p <- plotly::add_trace(
p,
x = dt$mesh[[i]]$vertices$x,
y = dt$mesh[[i]]$vertices$y,
z = dt$mesh[[i]]$vertices$z,
i = dt$mesh[[i]]$faces$i-1,
j = dt$mesh[[i]]$faces$j-1,
k = dt$mesh[[i]]$faces$k-1,
facecolor = rep(dt$colour[i],nrow(dt$mesh[[i]]$faces)),
text = dt$colour[i],
type = "mesh3d")
}
p
p <- plotly::plot_ly()
for(i in 1:nrow(dt)){
p <- plotly::add_trace(
p,
x = dt$mesh[[i]]$vertices$x,
y = dt$mesh[[i]]$vertices$y,
z = dt$mesh[[i]]$vertices$z,
i = dt$mesh[[i]]$faces$i-1,
j = dt$mesh[[i]]$faces$j-1,
k = dt$mesh[[i]]$faces$k-1,
facecolor = rep(dt$colour[i],nrow(dt$mesh[[i]]$faces)),
text = dt$label[i],
type = "mesh3d")
}
p
#
#
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
output_dir = "~/Desktop/test2/",
verbose = TRUE)
#
#
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
verbose = TRUE)
#
#
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
output_dir = "~/Desktop/test2/",
verbose = TRUE)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
dt <- cortex_2_3datlas()
devtools::load_all(".")
dt <- cortex_2_3datlas()
# Setup some directories for output data
dirs <- sapply(c(paste("atlas", annot, c("ascii", "ply"), sep="/"), "srf/ascii", "srf/ply"),
function(x) file.path(output_dir, subject, x))
j <- lapply(dirs[!sapply(dirs, dir.exists)], dir.create, recursive = TRUE)
dirs
# check hemisphere information
hemisphere <- match.arg(hemisphere, c("rh", "lh"))
hemi <- switch(hemisphere, "rh" = "right", "lh" = "left")
# find path to annotation file
annot_file <- list.files(label_dir, paste(hemisphere, annot, "annot", sep="."), full.names = T)
# Read in annotation file, verbose false since annot2dpv() also spits out this information
ant <- read_annotation(annot_file, verbose = FALSE)
colortable <- ant$colortable
# Find any color label _not_ in label vector
lab_not_present <- is.na(match(colortable$code, ant$label))
# convert annotation to dpv files
dpx <- annot2dpv(annot_file,
file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
verbose = verbose)
# convert surface file to ascii
surf <- surf2asc(file.path(subject_dir, subject, "surf", paste(hemisphere, surface, sep=".")),
file.path(dirs[3], paste(hemisphere, surface, "dpv", sep=".")),
verbose = verbose)
# split into labels
plys <- surfsplit(
srf_ply = file.path(dirs[4], paste(hemisphere, surface, "ply", sep=".")),
label_path = file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
prefix = annot,
output_dir = file.path(output_dir, subject, "atlas", annot),
verbose = verbose)
file.path(dirs[4], paste(hemisphere, surface, "ply", sep="."))
# Setup some directories for output data
dirs <- sapply(c(paste("atlas", annot, c("ascii", "ply"), sep="/"), "srf/ascii", "srf/ply"),
function(x) file.path(output_dir, subject, x))
j <- lapply(dirs[!sapply(dirs, dir.exists)], dir.create, recursive = TRUE)
# check hemisphere information
hemisphere <- match.arg(hemisphere, c("rh", "lh"))
hemi <- switch(hemisphere, "rh" = "right", "lh" = "left")
# find path to annotation file
annot_file <- list.files(label_dir, paste(hemisphere, annot, "annot", sep="."), full.names = T)
# Read in annotation file, verbose false since annot2dpv() also spits out this information
ant <- read_annotation(annot_file, verbose = FALSE)$colortable
colortable <- ant$colortable
# Find any color label _not_ in label vector
lab_not_present <- sapply(colortable$code, function(x) any(x %in% annot$label))
# convert annotation to dpv files
dpx <- annot2dpv(annot_file,
file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
verbose = verbose)
# convert surface file to ascii
surf <- surf2asc(file.path(subject_dir, subject, "surf", paste(hemisphere, surface, sep=".")),
file.path(dirs[3], paste(hemisphere, surface, "dpv", sep=".")),
verbose = verbose)
# make entire brain ply
ply <- asc2ply(file.path(dirs[3], paste(hemisphere, surface, "dpv", sep=".")),
file.path(dirs[4], paste(hemisphere, surface, "ply", sep=".")))
# split into labels
plys <- surfsplit(
srf_ply = file.path(dirs[4], paste(hemisphere, surface, "ply", sep=".")),
label_path = file.path(dirs[1], paste(hemisphere, annot, "dpv", sep=".")),
prefix = annot,
output_dir = file.path(output_dir, subject, "atlas", annot),
verbose = verbose)
length(plys) != nrow(colortable)
# Read in annotation file, verbose false since annot2dpv() also spits out this information
ant <- read_annotation(annot_file, verbose = FALSE)
colortable <- ant$colortable
# Find any color label _not_ in label vector
lab_not_present <- sapply(colortable$code, function(x) any(x %in% annot$label))
# Find any color label _not_ in label vector
lab_not_present <- sapply(colortable$code, function(x) any(x %in% ant$label))
length(plys) != nrow(colortable)
length(plys)
devtools::load_all(".")
devtools::load_all(".")
dt <- cortex_2_3datlas()
length(plys) != nrow(colortable)
j
lab_not_present
colortable[!lab_not_present,]
colortable <- colortable[lab_not_present,]
dt <- dplyr::tibble(
atlas = annot,
surf = surface,
hemi = hemi,
region = colortable$label,
colour = colortable$hex,
label = paste(hemisphere, colortable$label, sep="_"),
roi = sprintf("%04d", 1:nrow(colortable)),
annot = colortable$label
)
dt$mesh <- lapply(dt$roi, function(x) plys[[which(names(plys) == x)]])
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
output_dir = "~/Desktop/test2/",
verbose = TRUE)
p <- plotly::plot_ly()
for(i in 1:nrow(dt)){
p <- plotly::add_trace(
p,
x = dt$mesh[[i]]$vertices$x,
y = dt$mesh[[i]]$vertices$y,
z = dt$mesh[[i]]$vertices$z,
i = dt$mesh[[i]]$faces$i-1,
j = dt$mesh[[i]]$faces$j-1,
k = dt$mesh[[i]]$faces$k-1,
facecolor = rep(dt$colour[i],nrow(dt$mesh[[i]]$faces)),
type = "mesh3d")
}
p
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
verbose = TRUE)
# # Test plot it!
p <- plotly::plot_ly()
for(i in 1:nrow(dt)){
p <- plotly::add_trace(
p,
x = dt$mesh[[i]]$vertices$x,
y = dt$mesh[[i]]$vertices$y,
z = dt$mesh[[i]]$vertices$z,
i = dt$mesh[[i]]$faces$i-1,
j = dt$mesh[[i]]$faces$j-1,
k = dt$mesh[[i]]$faces$k-1,
facecolor = rep(dt$colour[i],nrow(dt$mesh[[i]]$faces)),
type = "mesh3d")
}
p
dt
View(dt)
dt$label
grepl("wall", dt$label, ignore.case = TRUE)
devtools::load_all(".")
devtools::load_all(".")
dt <- cortex_2_3datlas(subject = "fsaverage5",
hemisphere = "rh",
surface = "inflated",
annot = "aparc.a2009s",
verbose = TRUE)
