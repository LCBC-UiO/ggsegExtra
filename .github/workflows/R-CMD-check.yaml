# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04, r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master
      
      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}
        
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        env:
          XQUARTZ_VERSION: 2.7.11
        run: |
           curl -fLo /tmp/XQuartz.dmg "https://dl.bintray.com/xquartz/downloads/XQuartz-${XQUARTZ_VERSION}.dmg"
           sudo hdiutil attach -noverify /tmp/XQuartz.dmg
           sudo installer -pkg "/Volumes/XQuartz-${XQUARTZ_VERSION}/XQuartz.pkg" -target /
           sudo hdiutil detach /Volumes/XQuartz-${XQUARTZ_VERSION}
           rm /tmp/XQuartz.dmg
           # conflicts with gfortran from r-lib/actions when linking gcc
           rm '/usr/local/bin/gfortran'
           brew install pkg-config gdal proj geos
           brew install imagemagick libpng ghostscript wget 
           brew tap coin-or-tools/coinor
           brew install symphony.
           Rscript -e "install.packages('R2OpenBUGS',type='source')"
      
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd 
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')
          sudo apt-get -qq update ;
          sudo apt-get install -y cmake libfftw3-dev dcmtk;
          sudo apt-get install -y libv8-dev libssh-dev;
          sudo apt-get install -y libsecret-1-dev libpng-dev libpoppler-cpp-dev;
          sudo apt-get install -y libhdf5-serial-dev libhdf5-dev  ;
          sudo apt-get install -y mesa-common-dev libglu1-mesa-dev || true;
          sudo apt-get install -y libprotobuf-dev protobuf-compiler libprotoc-dev;
          sudo apt-get install -y software-properties-common ;
          sudo apt-get install -y ffmpeg --allow-unauthenticated ;
          sudo apt-get install -y libmagick++-dev ;
          sudo apt-get install -y ghostscript imagemagick || true ;
          sudo apt-get install -y libudunits2-dev ;
          sudo apt-get install openmpi-bin libopenmpi-dev
          # sudo add-apt-repository -y ppa:opencpu/jq ;
          sudo apt-get install -y libjq-dev ;
          sudo apt-get install libudunits2-dev
          sudo apt-get install libgdal-dev
          sudo apt-get install libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev
          sudo apt-get install coinor-symphony
          # OpenBUGS
          tar zxvf OpenBUGS-3.2.3.tar.gz
          cd OpenBUGS-3.2.3
          ./configure
          make
          sudo make install
          cd -


      - name: Install FreeSurfer
        if: runner.os != 'Windows'
        run: |
          sudo apt-get -y install bc binutils libgomp1 perl psmisc sudo tar tcsh unzip uuid-dev vim-common libjpeg62-dev || true ;
          wget --quiet -O freesurfer.tar.gz https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.0/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz ;
          sudo tar -C /usr/local -xzf freesurfer.tar.gz ;
          sudo rm -rf freesurfer.tar.gz ;
          # sudo rm travis_wait*.log ;
          export FREESURFER_HOME=/usr/local/freesurfer; source $FREESURFER_HOME/SetUpFreeSurfer.sh ;
          export PATH=${PATH}:${FREESURFER_HOME}/bin:${FREESURFER_HOME}/mni/bin ;
          sudo chown -R $(whoami) ${FREESURFER_HOME};
          echo ${FREESURFER_HOME}

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = c("Depends", "Suggests"))
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
